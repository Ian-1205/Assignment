"""
THIS IS A BOOK MANAGEMENT SYSTEM THAT ALLOWS USERS TO ADD, VIEW, UPDATE AND DELETE BOOKS FROM A FILE
"""

import datetime
import os


# Create a function to get the write year format of the user's input
def get_valid_year_input(prompt):
    while True:
        user_input = input(prompt)
        try:
            year = int(user_input)
            if 1000 <= year <= 9999:  # Ensure the year is a 4-digit number
                return year
            else:
                print("\033[91m Invalid input. Please enter a valid 4-digit year (YYYY)\033[0m.")
        except ValueError:
            print("\033[91m Invalid input. Please enter a valid year (YYYY).\033[0m")


def get_valid_date_input(prompt, format_str):
    while True:
        user_input = input(prompt)
        try:
            date = datetime.datetime.strptime(user_input, format_str)
            return date
        except ValueError:
            print("\033[91m Invalid input. Please enter a valid date.\033[0m")


# Create a Book class with the following attributes:

class Book:

    def __init__(self, isbn, title, author, publisher, genre, year_published, date_purchased, status):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.publisher = publisher
        self.genre = genre
        self.year_published = year_published
        self.date_purchased = date_purchased
        self.status = status


# Create a BookManagementSystem class with the following attributes:
class BookManagementSystem:

    # initializes the following attributes:
    def __init__(self, filename):
        self.books = []
        self.filename = filename
        self.read_from_file()
    
    # Create a function to search for books
    def search_books(self):
        while True:
            proceed = str(input("Do you want to continue searching books? (\033[92my\033[0m/\033[91mn\033[0m): "))
            if proceed.lower() == "n":
                os.system('cls')
                break
            elif proceed.lower() == "y":
                while True:
                    isbn = input("Enter book ISBN: ")
                    if len(isbn) == 13 and isbn.isdigit():
                        break  # Exit the loop if the ISBN is valid
                    else:
                        print(
                            "\033[91m Invalid ISBN. ISBN must be exactly 13 digits and consist only of digits.\033[0m")

                while True:
                    author = input("Enter book author: ")
                    if author.replace(" ", "").isalpha():
                        break
                    else:
                        print("\033[91mInvalid input. Please enter the author using only letters.\033[0m")

                while True:
                    title = input("Enter book title: ")
                    break

                books_found = False  # Flag to check if any books match the criteria

                for book in self.books:
                    isbn_match = not isbn or book.isbn == isbn
                    author_match = not author or book.author.lower() == author.lower()
                    title_match = not title or book.title.lower() == title.lower()

                    if isbn_match and author_match and title_match:
                        print(
                            f"ISBN: \033[93m{book.isbn}\033[0m, "
                            f"Author: \033[93m{book.author}\033[0m, "
                            f"Title: \033[93m{book.title}\033[0m, "
                            f"Publisher: \033[93m{book.publisher}\033[0m, "
                            f"Genre: \033[93m{book.genre}\033[0m, "
                            f"Year Published: \033[93m{book.year_published}\033[0m, "
                            f"Date Purchased: \033[93m{book.date_purchased.strftime('%d-%m-%Y')}\033[0m, "
                            f"Status: \033[93m{book.status}\033[0m"
                        )
                        books_found = True

                if not books_found:
                    print("\033[91m No books found.\033[0m")
            else:
                print("\033[91mInvalid input. Please enter 'y' or 'n'.\033[0m")

     # Create a function called view_books that takes in the following parameters:
    def view_books(self):

        print("Numbers of books:", len(self.books))
        if len(self.books) == 0:
            print("\033[91m No books found.\033[0m")
            input("Press Enter to continue...")
        else:
            for book in self.books:
                print(
                    f"ISBN: \033[93m{book.isbn}\033[0m, "
                    f"Author: \033[93m{book.author}\033[0m, "
                    f"Title: \033[93m{book.title}\033[0m, "
                    f"Publisher: \033[93m{book.publisher}\033[0m, "
                    f"Genre: \033[93m{book.genre}\033[0m, "
                    f"Year Published: \033[93m{book.year_published}\033[0m, "
                    f"Date Purchased: \033[93m{book.date_purchased.strftime('%d-%m-%Y')}\033[0m, "
                    f"Status: \033[93m{book.status}\033[0m"
                )
            input("Press Enter to continue...")
            os.system('cls')
            

    # Create a function called add_book that takes in the following parameters:
    def update_book(self):
        while True:
            proceed = input("Do you want to continue updating books? (\033[92my\033[0m/\033[91mn\033[0m): ").lower()
            if proceed == "n":
                os.system('cls')
                return
            elif proceed != "y":
                print("\033[91m Invalid input. Please enter 'y' or 'n'.\033[0m")
                continue

            isbn = self.get_valid_isbn_input()
            books_found = self.display_book_info(isbn)

            if not books_found:
                print("\033[91m No books found.\033[0m")
                return

            while True:
                update_choices = {
                    "1": "Author",
                    "2": "Title",
                    "3": "Publisher",
                    "4": "Genre",
                    "5": "Year Published",
                    "6": "Date Purchased",
                    "7": "Status",
                    "8": "Back to Menu",
                }

                print("Select the attribute to update:")
                for key, value in update_choices.items():
                    print(f"\033[94m{key}. {value}\033[0m")

                update_choice = input("Enter your choice: ")
                if update_choice == "8":
                    os.system('cls')
                    return
                elif update_choice in update_choices:
                    attribute = update_choices[update_choice]
                    new_value = self.get_valid_input(attribute)
                    self.update_book_attribute(isbn, attribute, new_value)
                    print(f"\033[92m Book {attribute} updated successfully.\033[0m")
                    break  # Break out of the inner loop after a successful update
                else:
                    print("\033[91m Invalid choice. Please try again.\033[0m")


    def add_book(self):
        while True:
            proceed = input("Do you want to continue adding books? (\033[92my\033[0m/\033[91mn\033[0m): ")
            if proceed.lower() == "n":
                os.system('cls')
                return
            elif proceed.lower() != "y":
                print("\033[91m Invalid input. Please enter 'y' or 'n'.\033[0m")
                continue  # Continue to the next iteration of the loop if the input is not 'y'

            while True:
                isbn = input("Enter book ISBN: ")
                if len(isbn) == 13 and isbn.isdigit():
                    break  # Exit the loop if the ISBN is valid
                else:
                    print("\033[91m Invalid ISBN. ISBN must be exactly 13 digits and consist only of digits.\033[0m")

            author = input("Enter book author: ")
            title = input("Enter book title: ")
            publisher = input("Enter book publisher: ")
            genre = input("Enter book genre: ")
            year_published = get_valid_year_input("Enter year published (YYYY): ")
            date_purchased = get_valid_date_input("Enter date purchased (DD-MM-YYYY): ", "%d-%m-%Y")
            status = input("Enter book status: ")

            # Confirmation of the criteria of the user's input
            if self.validate_alpha_with_spaces(author) and self.validate_alpha_with_spaces(genre):
                book = Book(isbn, author, title, publisher, genre, year_published, date_purchased, status)
                books_to_add = [book]
                self.books.extend(books_to_add)
                self.write_to_file()
                print("\033[92m The book has been successfully added\033[0m.")
                os.system('cls')
            else:
                print("\033[91m There are some invalid inputs, please try again\033[0m.")

    def delete_book(self):
        while True:
            proceed = input("Do you want to continue deleting books? (\033[92my\033[0m/\033[91m\033[0m): ")
            if proceed.lower() == "n":
                os.system('cls')
                return
            elif proceed.lower() != "y":
                print("\033[91mInvalid input. Please enter 'y' or 'n'.\033[0m")
                continue  # Continue to the next iteration of the loop if the input is not 'y'

            for book in self.books:
                print(
                    f"ISBN: \033[93m{book.isbn}\033[0m, "
                    f"Author: \033[93m{book.author}\033[0m, "
                    f"Title: \033[93m{book.title}\033[0m, "
                    f"Publisher: \033[93m{book.publisher}\033[0m, "
                    f"Genre: \033[93m{book.genre}\033[0m, "
                    f"Year Published: \033[93m{book.year_published}\033[0m, "
                    f"Date Purchased: \033[93m{book.date_purchased.strftime('%d-%m-%Y')}\033[0m, "
                    f"Status: \033[93m{book.status}\033[0m"
                )

            while True:
                isbn = input("Enter book ISBN to delete: ")
                if len(isbn) == 13 and isbn.isdigit():
                    break  # Exit the loop if the ISBN is valid
                else:
                    print(
                        "\033[91m Invalid ISBN. ISBN must be exactly 13 digits and consist only of digits.\033[0m")

            for book in self.books:
                if book.isbn == isbn:
                    self.books.remove(book)
                    print("\033[92m Book deleted successfully\033[0m")
                    self.write_to_file()
                    os.system('cls')
                    return

            print("\033[91mBook not found.\033[0m")

    @staticmethod
    def validate_alpha_with_spaces(value):
        return all(c.isalpha() or c.isspace() for c in value)

    Run = True

    def __len__(self):
        return len(self.books)

    @staticmethod
    def get_valid_isbn_input():
        while True:
            isbn = input("Enter book ISBN: ")
            if len(isbn) == 13 and isbn.isdigit():
                return isbn
            else:
                print("\033[91m Invalid ISBN. ISBN must be exactly 13 digits and consist only of digits.\033[0m")

    def display_book_info(self, isbn):
        books_found = False
        for book in self.books:
            if isbn == book.isbn:
                print(
                    f'ISBN: {book.isbn}, '
                    f'Author: {book.author}, '
                    f'Title: {book.title}, '
                    f'Publisher: {book.publisher}, '
                    f'Genre: {book.genre}, '
                    f'Year Published: {book.year_published}, '
                    f'Date Purchased: {book.date_purchased.strftime("%d-%m-%Y")}, '
                    f'Status: {book.status}'
                )
                books_found = True
        return books_found

    def get_valid_input(self, attribute):
        attribute = attribute.replace(" ", "_").lower()
        while True:
            new_value = input(f"Enter the new {attribute.replace('_', ' ')} of the book: ")
            validation_function = getattr(self, f"validate_{attribute}")

            if validation_function(new_value):
                return new_value
            else:
                print(f"\033[91mInvalid input. Please enter a valid {attribute.replace('_', ' ')}.\033[0m")
                continue
        

    @staticmethod
    def validate_author(value):
        return value.replace(" ", "").isalpha()

    @staticmethod
    def validate_title(value):
        return str(value.replace(" ", ""))

    @staticmethod
    def validate_publisher(value):
        return str(value.replace(" ", ""))

    @staticmethod
    def validate_genre(value):
        return value.replace(" ", "").isalpha()

    @staticmethod
    def validate_year_published(value):
        return value.replace(" ", "").isdigit()

    def validate_date_purchased(self, value):
        format_str = "%d-%m-%Y"
        try:
            self.get_valid_date_input("Dummy prompt", format_str, date_str=value)
            return True
        except ValueError:
            return False

    @staticmethod
    def validate_status(value):
        return all(c.isalpha() or c == '-' for c in value)

    def update_book_attribute(self, isbn, attribute, new_value):
        for book in self.books:
            if isbn == book.isbn:
                new_value = new_value.replace(" ", "")
                if attribute == "Date Purchased":
                    # Convert new_value to a datetime object
                    new_date = self.get_valid_date_input("Dummy prompt", "%d-%m-%Y", date_str=new_value)
                    book.date_purchased = new_date
                    setattr(book, attribute, new_date.strftime("%d-%m-%Y"))
                elif attribute == "Year Published":
                    book.year_published = new_value  # Directly modify the year_published attribute
                    self.write_to_file()  # Call write_to_file on the instance
                else:
                    new_attributes = self.get_valid_input(attribute)
                    setattr(book, attribute, new_attributes)  # Directly modify the attribute
                self.write_to_file()
                return



    @staticmethod
    def get_valid_date_input(prompt, format_str,date_str=None):
        while True:
            if date_str is None:
                date_str = input(prompt)
            try:
                date_obj = datetime.datetime.strptime(date_str, format_str)
                return date_obj
            except ValueError:
                print(f"\033[91m Invalid date format. Please enter the date in the format: {format_str}\033[0m")

    # Create a function called write_to_file that takes in the following parameters:
    def write_to_file(self):
        try:
            with open(self.filename, 'w') as f:
                for book in self.books:
                    data_line = (
                        f"{book.isbn},{book.author},{book.title},{book.publisher},"
                        f"{book.genre},{book.year_published},{book.date_purchased.strftime('%d-%m-%Y')},"
                        f"{book.status}\n"
                    )
                    f.write(data_line)
                    print("Writing to file:", data_line)
            print("Write to file successful.")
        except Exception as e:
            print(f"Error writing to file: {e}")





    # Create a function called read_from_file that takes in the following parameters:
    def read_from_file(self):
        self.books = []
        try:
            with open(self.filename, 'r') as f:
                for line in f:
                    data = line.strip().split(',')
                    if len(data) == 8:
                        isbn, author, title, publisher, genre, year_published_str, date_purchased_str, status = data
                        year_published = int(year_published_str)
                        date_purchased = datetime.datetime.strptime(date_purchased_str, "%d-%m-%Y")
                        book = Book(isbn, title, author, publisher, genre, year_published, date_purchased, status)
                        self.books.append(book)
                    else:
                        print(f"Skipping invalid line: {line}")
        except FileNotFoundError:
            print("\033[91m Error: File not found\033[0m")


# Create an instance of the BookManagementSystem class and call the functions
bms = BookManagementSystem('books.txt')
while True:
    print("\033[94m1. Search book")
    print("2. View books")
    print("3. Update book")
    print("4. Add book")
    print("5. Delete book")
    print("6. Exit\033[0m")

    choice = input("Enter your choice: ")
    if choice == "1":
        bms.search_books()
    elif choice == "2":
        bms.view_books()
    elif choice == "3":
        bms.update_book()
    elif choice == "4":
        bms.add_book()
    elif choice == "5":
        bms.delete_book()
    elif choice == "6":
        confirm_exit = input("Are you sure you want to exit the program?(\033[92my\033[0m/\033[91mn\033[0m)").lower()
        if confirm_exit == 'y':
            break
        if confirm_exit == 'n':
            continue
    else:
        print("\033[91m Invalid choice. Please try again.\033[0m")

        try_again = input("Do you wish to try again? (\033[92my\033[0m/\033[91mn\033[0m): ").lower()

        while try_again != "n" and try_again != "y":
            print("\033[91m Invalid choice. Please try again.\033[0m")
            try_again = input("Do you wish to try again? (\033[92my\033[0m/\033[91mn\033[0m): ").lower()
        if try_again == "n":
            break
print("\033[95mThank you for using the Book Management System. Goodbye!\033[0m")
